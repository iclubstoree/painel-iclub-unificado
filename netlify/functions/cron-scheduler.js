// netlify/functions/cron-scheduler.js
// Fun√ß√£o que agenda e executa a automa√ß√£o diariamente √†s 23h

exports.handler = async (event, context) => {
    // Verificar se √© uma chamada do cron job
    const isCronJob = event.headers['x-netlify-cron'] === 'true';
    
    if (!isCronJob) {
        // Chamada manual para testar
        console.log('üîß Teste manual da automa√ß√£o');
    } else {
        console.log('‚è∞ Execu√ß√£o autom√°tica via cron job');
    }
    
    try {
        // Chamar a fun√ß√£o de automa√ß√£o
        const autoUpdateHandler = require('./auto-update.js').handler;
        const resultado = await autoUpdateHandler(event, context);
        
        // Log do resultado
        const body = JSON.parse(resultado.body);
        
        if (body.success) {
            console.log('‚úÖ Automa√ß√£o executada com sucesso:', body);
            
            // Opcional: Enviar notifica√ß√£o por email ou webhook
            await enviarNotificacao({
                tipo: 'sucesso',
                mensagem: `Relat√≥rios processados automaticamente`,
                detalhes: body
            });
            
        } else {
            console.error('‚ùå Erro na automa√ß√£o:', body);
            
            // Opcional: Enviar notifica√ß√£o de erro
            await enviarNotificacao({
                tipo: 'erro',
                mensagem: `Erro ao processar relat√≥rios: ${body.error}`,
                detalhes: body
            });
        }
        
        return resultado;
        
    } catch (error) {
        console.error('‚ùå Erro cr√≠tico no agendador:', error);
        
        return {
            statusCode: 500,
            body: JSON.stringify({
                success: false,
                message: 'Erro cr√≠tico no agendador',
                error: error.message
            })
        };
    }
};

// Fun√ß√£o para enviar notifica√ß√µes (opcional)
async function enviarNotificacao(dados) {
    try {
        console.log(`üìß Enviando notifica√ß√£o: ${dados.tipo}`);
        
        // Exemplo com webhook do Discord/Slack
        if (process.env.WEBHOOK_URL) {
            const fetch = require('node-fetch');
            
            const payload = {
                content: `ü§ñ **Automa√ß√£o ICLUB**\n\n**Status:** ${dados.tipo}\n**Mensagem:** ${dados.mensagem}\n**Hor√°rio:** ${new Date().toLocaleString('pt-BR')}`
            };
            
            await fetch(process.env.WEBHOOK_URL, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            });
            
            console.log('‚úÖ Notifica√ß√£o enviada com sucesso');
        }
        
    } catch (error) {
        console.error('‚ùå Erro ao enviar notifica√ß√£o:', error);
    }
}